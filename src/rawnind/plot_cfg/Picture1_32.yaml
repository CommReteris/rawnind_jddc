# =============================================================================
# Visualization Configuration for Denoising Comparison Figure (Picture1)
# =============================================================================
#
# This configuration file defines the structure and content of a research
# figure that compares different image denoising techniques. It specifies
# the input images at various noise levels and the corresponding outputs
# from different denoising methods.
#
# Used by:
#   - mk_megafig.py: Generates publication-ready comparison figures
#   - paper_scripts/mk_pipelinefig.py: Creates pipeline visualizations
#
# File structure:
#   - Major categories (Input, Denoising, Compression)
#   - Methods within each category (e.g., "Bayer input", "BM3D", "U-Net")
#   - Image specifications with paths, metrics, and metadata
#
# Each image entry contains:
#   - src_fpath: Full path to the source image file
#   - caption: Text caption to display under the image
#   - msssim: Multi-Scale Structural Similarity value (1.0 = perfect quality)
#   - parameters: Additional parameters shown in captions (e.g., ISO, exposure)
#   - bpp: Bits per pixel (for compression methods)
#
# The "32" in the filename refers to the base feature units (funit=32)
# used in the neural network models being visualized.

# =============================================================================
# Input Images
# =============================================================================
# This section defines the ground truth and noisy input images at different
# ISO values. Three input types are included:
#   - Bayer input: Raw Bayer pattern images (4-channel)
#   - Linear RGB input: Linear color space images
#   - Developed input: Images processed with standard photo development pipeline

Input:
  # Raw Bayer pattern images (4-channel, before demosaicing)
  - method: "Bayer input"
    images:
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/src/faux_Bayer/MuseeL-bluebirds-A7C/gt/darktable_exported/ISO50_capt0015.png"
        caption: "MS-SSIM: 1.00, s.s.: 8 s, ISO50"
        parameters: "s.s.: 8 s, ISO50"
        msssim: 1.00
        bpp: 5.27
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/src/faux_Bayer/MuseeL-bluebirds-A7C/darktable_exported/ISO16000_capt0002.png"
        caption: "MS-SSIM: 0.859, s.s.: 1/40 s, ISO16000"
        msssim: 0.859
        bpp: 8.57
        parameters: "s.s.: 1/40 s, ISO16000"
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/src/faux_Bayer/MuseeL-bluebirds-A7C/darktable_exported/ISO64000_capt0007.png"
        caption: "MS-SSIM: 0.577, s.s.: 1/160 s, ISO64000"
        msssim: 0.577
        parameters: "s.s.: 1/160 s, ISO64000"
        bpp: 9.62
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/src/faux_Bayer/MuseeL-bluebirds-A7C/darktable_exported/ISO204800_capt0010.png"
        caption: "MS-SSIM: 0.237, s.s.: 1/500 s, ISO204800"
        msssim: 0.237
        parameters: "s.s.: 1/500 s, ISO204800"
        bpp: 9.86
  - method: "Linear RGB input"
    images:
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/lin_rec2020/MuseeL-bluebirds-A7C/gt/ISO50_capt0015.arw.tif"
        caption: "MS-SSIM: 1.00, s.s.: 8 s, ISO50"
        parameters: "s.s.: 8 s, ISO50"
        msssim: 1.00
        bpp: 5.27
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/lin_rec2020/MuseeL-bluebirds-A7C/ISO16000_capt0002.arw.tif"
        caption: "MS-SSIM: 0.859, s.s.: 1/40 s, ISO16000"
        msssim: 0.859
        bpp: 8.57
        parameters: "s.s.: 1/40 s, ISO16000"
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/lin_rec2020/MuseeL-bluebirds-A7C/ISO64000_capt0007.arw.tif"
        caption: "MS-SSIM: 0.577, s.s.: 1/160 s, ISO64000"
        msssim: 0.577
        parameters: "s.s.: 1/160 s, ISO64000"
        bpp: 9.62
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/lin_rec2020/MuseeL-bluebirds-A7C/ISO204800_capt0010.arw.tif"
        caption: "MS-SSIM: 0.237, s.s.: 1/500 s, ISO204800"
        msssim: 0.237
        parameters: "s.s.: 1/500 s, ISO204800"
        bpp: 9.86
  - method: "Developed input"
    images:
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/dt/MuseeL-bluebirds-A7C/MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 1.00, s.s.: 8 s, ISO50"
        parameters: "s.s.: 8 s, ISO50"
        msssim: 1.00
        bpp: 5.27
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/dt/MuseeL-bluebirds-A7C/MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.859, s.s.: 1/40 s, ISO16000"
        msssim: 0.859
        bpp: 8.57
        parameters: "s.s.: 1/40 s, ISO16000"
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/dt/MuseeL-bluebirds-A7C/MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.577, s.s.: 1/160 s, ISO64000"
        msssim: 0.577
        parameters: "s.s.: 1/160 s, ISO64000"
        bpp: 9.62
      - src_fpath: "/orb/benoit_phd/datasets/RawNIND/proc/dt/MuseeL-bluebirds-A7C/MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.237, s.s.: 1/500 s, ISO204800"
        msssim: 0.237
        parameters: "s.s.: 1/500 s, ISO204800"
        bpp: 9.86

# =============================================================================
# Denoising Methods Comparison
# =============================================================================
# This section compares different denoising approaches:
#   - BM3D: Classical algorithm with noise parameter σ
#   - U-Net: Neural network trained on developed images
#   - U-Net + development: End-to-end neural approach from raw Bayer to RGB
#
# Method naming convention:
#   - "Method [CITATION]\n(from input type)"
#   - [BM3D], [NIND], [OURS] refer to paper citations
#   - Text in parentheses indicates the input type used

Denoising:
  # BM3D: Block-Matching and 3D filtering algorithm
  # - σ parameter controls denoising strength
  # - Higher σ values for higher noise levels
  - method: "BM3D [BM3D]\n(from developed input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/bm3d_sRGB_10/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.996, σ=10"
        msssim: 0.996
        parameters: "σ=10"
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/bm3d_sRGB_50/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.964, σ=50"
        msssim: 0.964
        parameters: "σ=50"
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/bm3d_sRGB_99/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.940, σ=99"
        msssim: 0.940
        parameters: "σ=99"
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/bm3d_sRGB_99/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.761, σ=99"
        msssim: 0.761
        parameters: "σ=99"

  # U-Net: Neural network architecture trained on developed (sRGB) images
  # - Traditional approach using already-developed images as input
  # - NIND refers to the "Natural Image Noise Dataset"
  - method: "U-Net [NIND]\n(from developed input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/train_denoise_proc2proc_2024-05-17-proc2proc_ocv3_notrans_valeither_msssim_-4/manproc/iter_3195000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.990"
        msssim: 0.990
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/train_denoise_proc2proc_2024-05-17-proc2proc_ocv3_notrans_valeither_msssim_-4/manproc/iter_3195000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.959"
        msssim: 0.959
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/train_denoise_proc2proc_2024-05-17-proc2proc_ocv3_notrans_valeither_msssim_-4/manproc/iter_3195000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.924"
        msssim: 0.924
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/train_denoise_proc2proc_2024-05-17-proc2proc_ocv3_notrans_valeither_msssim_-4/manproc/iter_3195000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.842"
        msssim: 0.842
        parameters: ""

  # U-Net + development: Our end-to-end approach directly from raw Bayer patterns
  # - Processes raw 4-channel Bayer images directly (without separate demosaicing)
  # - Includes the development process within the neural network
  # - [OURS] indicates this is the novel approach proposed in the current paper
  - method: "U-Net + development [OURS]\n(from Bayer input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/DenoiserTrainingBayerToProfiledRGB_4ch_2024-02-21-bayer_ms-ssim_mgout_notrans_valeither_-4/manproc/iter_4350000/MuseeL-bluebirds-A7C_ISO50_capt0015.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.989"
        msssim: 0.989
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/DenoiserTrainingBayerToProfiledRGB_4ch_2024-02-21-bayer_ms-ssim_mgout_notrans_valeither_-4/manproc/iter_4350000/MuseeL-bluebirds-A7C_ISO16000_capt0002.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.975"
        msssim: 0.975
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/DenoiserTrainingBayerToProfiledRGB_4ch_2024-02-21-bayer_ms-ssim_mgout_notrans_valeither_-4/manproc/iter_4350000/MuseeL-bluebirds-A7C_ISO64000_capt0007.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.964"
        msssim: 0.964
        parameters: ""
      - src_fpath: "/orb/benoit_phd/models/rawnind_denoise/DenoiserTrainingBayerToProfiledRGB_4ch_2024-02-21-bayer_ms-ssim_mgout_notrans_valeither_-4/manproc/iter_4350000/MuseeL-bluebirds-A7C_ISO204800_capt0010.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.945"
        msssim: 0.945
        parameters: ""

# =============================================================================
# Compression Methods Comparison
# =============================================================================
# This section compares different compression approaches:
#   - JPEG XL: Standard image compression with quality parameter q
#   - Learned compression: Neural network with rate-distortion tradeoff parameter λ
#   - Joint Denoising and Compression: Combined approach from developed images
#   - Joint approaches with development: End-to-end from raw or linear RGB
#
# Key metrics:
#   - MS-SSIM: Quality metric (higher is better, 1.0 is perfect)
#   - bpp: Bits per pixel (lower is better, measures compression efficiency)
#   - λ: Rate-distortion tradeoff parameter (higher λ = higher quality but higher bitrate)
#   - q: Quality parameter for standard codecs (higher q = higher quality)

Compression:
  # JPEG XL: Modern standard image codec optimized for both lossy and lossless compression
  # - q parameter controls quality (lower values = higher compression)
  # - Standard non-neural baseline for comparison
  - method: "JPEG XL [JPEGXL]\n(from developed input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/JPEGXL_sRGB_12/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.973, 0.045 bpp, -q 12"
        msssim: 0.973
        bpp: 0.045
        parameters: "-q 12"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/JPEGXL_sRGB_1/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.929, 0.046 bpp, -q 1"
        msssim: 0.929
        bpp: 0.046
        parameters: "-q 1"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/JPEGXL_sRGB_1/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.779, 0.090 bpp, -q 1"
        msssim: 0.779
        bpp: 0.090
        parameters: "-q 1"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/JPEGXL_sRGB_1/manproc/iter_1/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.355, 0.301 bpp, -q 1"
        msssim: 0.355
        bpp: 0.301
        parameters: "-q 1"

  # Learned compression: Neural network approach using the ManyPriors architecture
  # - λ parameter controls rate-distortion tradeoff
  # - Higher λ values prioritize quality over compression
  # - Operates on linear RGB input (already demosaiced)
  - method: "Learned compression\n[MANYPRIORS] + development\n(from linear RGB input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L32.0_Balle_Balle_2024-06-14-dc_msssim_mgout_prgb_x_x_notrans_valeither_32from64_-2/manproc/iter_5880000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.982, 0.055 bpp, λ=32"
        msssim: 0.982
        bpp: 0.055
        parameters: "λ=32"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L8.0_Balle_Balle_2024-06-14-dc_msssim_mgout_prgb_x_x_notrans_valeither_8from16_-2/manproc/iter_4980000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.950, 0.081 bpp, λ=8"
        msssim: 0.950
        bpp: 0.081
        parameters: "λ=8"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L4.0_Balle_Balle_2024-06-14-dc_msssim_mgout_prgb_x_x_notrans_valeither_4from8_-2/manproc/iter_5550000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.822, 0.134 bpp, λ=4"
        msssim: 0.822
        bpp: 0.134
        parameters: "λ=4"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L4.0_Balle_Balle_2024-06-14-dc_msssim_mgout_prgb_x_x_notrans_valeither_4from8_-2/manproc/iter_5550000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.403, 0.638 bpp, λ=4"
        msssim: 0.403
        bpp: 0.638
        parameters: "λ=4"

  # Joint Denoising and Compression: Combined model that simultaneously denoises and compresses
  # - Takes developed (sRGB) images as input and produces compressed output
  # - Optimizes the joint task with a single neural network
  # - [COMPDENOISE] indicates the method from the compression+denoising paper
  - method: "Joint Denoising and\nCompression [COMPDENOISE]\n(from Developed input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/train_dc_proc2proc_2024-05-23-dc_msssim_mgout_proc2proc_ocv3_notrans_valeither_4from8_-2/manproc/iter_1800000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.973, 0.048 bpp, λ=4"
        msssim: 0.973
        bpp: 0.048
        parameters: "λ=4"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/train_dc_proc2proc_2024-05-23-dc_msssim_mgout_proc2proc_ocv3_notrans_valeither_4from8_-2/manproc/iter_1800000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.942, 0.080 bpp, λ=4"
        msssim: 0.942
        bpp: 0.080
        parameters: "λ=4"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/train_dc_proc2proc_2024-05-23-dc_msssim_mgout_proc2proc_ocv3_notrans_valeither_2from4_-6/manproc/iter_5490000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.868, 0.050 bpp, λ=2"
        msssim: 0.868
        bpp: 0.050
        parameters: "λ=2"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/train_dc_proc2proc_2024-05-23-dc_msssim_mgout_proc2proc_ocv3_notrans_valeither_2from4_-6/manproc/iter_5490000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.829, 0.058 bpp, λ=2"
        msssim: 0.829
        bpp: 0.058
        parameters: "λ=2"

  # Joint Denoising and Compression + Development: Our approach with linear RGB input
  # - Takes linear RGB images (already demosaiced) and produces compressed output
  # - Handles both denoising and development in a single network
  # - [OURS] indicates this is a novel approach from the current paper
  # - Shows better performance at higher noise levels than standard methods
  - method: "Joint Denoising and\nCompression\n+ Development [OURS]\n(from linear RGB input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L32.0_Balle_Balle_2024-06-07-dc_msssim_mgout_prgb_notrans_valeither_32from64_-4/manproc/iter_5670000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO50_capt0015.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.980, 0.051 bpp, λ=32"
        msssim: 0.980
        bpp: 0.051
        parameters: λ=32
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L32.0_Balle_Balle_2024-06-07-dc_msssim_mgout_prgb_notrans_valeither_32from64_-4/manproc/iter_5670000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO16000_capt0002.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.970, 0.049 bpp, λ=32"
        msssim: 0.970
        bpp: 0.049
        parameters: λ=32
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L32.0_Balle_Balle_2024-06-07-dc_msssim_mgout_prgb_notrans_valeither_32from64_-4/manproc/iter_5670000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO64000_capt0007.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.959, 0.052 bpp, λ=32"
        msssim: 0.959
        bpp: 0.052
        parameters: "λ=32"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingProfiledRGBToProfiledRGB_3ch_L32.0_Balle_Balle_2024-06-07-dc_msssim_mgout_prgb_notrans_valeither_32from64_-4/manproc/iter_5670000/MuseeL-bluebirds-A7C_MuseeL-bluebirds-A7C_ISO204800_capt0010.arw.tif_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.939, 0.092 bpp, λ=32"
        msssim: 0.939
        bpp: 0.092
        parameters: "λ=32"
  # Joint Denoising, Demosaicing and Compression + development: Our full end-to-end approach
  # - Takes raw Bayer pattern (4-channel) images directly as input
  # - Performs all processing steps (demosaicing, denoising, development, compression) in a single network
  # - Represents the most complete end-to-end approach in the comparison
  # - [OURS] indicates this is a key novel contribution of the current paper
  # - Achieves the best performance on high-noise images with efficient compression
  - method: "Joint Denoising,\nDemosaicing and Compression\n+ development [OURS]\n(from Bayer input)"
    images:
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingBayerToProfiledRGB_4ch_L32.0_Balle_BayerPS_2024-06-07-dc_msssim_mgout_bayer_notrans_valeither_32from64_-4/manproc/iter_5325000/MuseeL-bluebirds-A7C_ISO50_capt0015.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.980, 0.044 bpp, λ=32"
        msssim: 0.980
        bpp: 0.044
        parameters: "λ=32"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingBayerToProfiledRGB_4ch_L32.0_Balle_BayerPS_2024-06-07-dc_msssim_mgout_bayer_notrans_valeither_32from64_-4/manproc/iter_5325000/MuseeL-bluebirds-A7C_ISO16000_capt0002.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.970, 0.042 bpp, λ=32"
        msssim: 0.970
        bpp: 0.042
        parameters: "λ=32"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingBayerToProfiledRGB_4ch_L32.0_Balle_BayerPS_2024-06-07-dc_msssim_mgout_bayer_notrans_valeither_32from64_-4/manproc/iter_5325000/MuseeL-bluebirds-A7C_ISO64000_capt0007.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.959, 0.041 bpp, λ=32"
        msssim: 0.959
        bpp: 0.041
        parameters: "λ=32"
      - src_fpath: "/orb/benoit_phd/models/rawnind_dc/DCTrainingBayerToProfiledRGB_4ch_L32.0_Balle_BayerPS_2024-06-07-dc_msssim_mgout_bayer_notrans_valeither_32from64_-4/manproc/iter_5325000/MuseeL-bluebirds-A7C_ISO204800_capt0010.arw_aligned_to_ISO50_capt0015.arw.tif.jpg"
        caption: "MS-SSIM: 0.940, 0.056 bpp, λ=32"
        msssim: 0.940
        bpp: 0.056
        parameters: "λ=32"

# =============================================================================
# Usage Guide
# =============================================================================
#
# This configuration file is used by mk_megafig.py to generate publication-ready
# comparison figures. Here's how to modify it for your own visualization needs:
#
# Adding a new method:
# 1. Choose the appropriate category (Input, Denoising, or Compression)
# 2. Add a new method entry with the format:
#    - method: "Method Name [CITATION]\n(from input type)"
#    - images: (list of image entries)
#
# Adding images to a method:
# 1. For each image, include these fields:
#    - src_fpath: Full path to the source image file
#    - caption: Text caption to display (typically includes metrics)
#    - msssim: MS-SSIM value (1.0 = perfect quality)
#    - parameters: Additional parameters shown in caption (optional)
#    - bpp: Bits per pixel (for compression methods)
#
# Naming conventions:
# - Method names should be consistent across figures
# - [CITATION] tags link to references in the paper
# - Input types in parentheses clarify what data the method uses
#
# For consistent figures:
# - Maintain the same order of methods across different configuration files
# - Use the same caption format for all images of the same type
# - Keep the same reference images for fair comparison
#
# After modifying:
# - Run mk_megafig.py to generate updated figures
# - Compare with previous versions to ensure consistent presentation

