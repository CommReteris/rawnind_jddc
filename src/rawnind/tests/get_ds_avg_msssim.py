"""Get average MS-SSIM scores for the progressive test"""
import os
import sys
import statistics
import yaml
sys.path.append('..')
from rawnind.libs import rawproc

# open RAWNIND_CONTENT_FPATH
dataset_descriptor = yaml.safe_load(open(rawproc.RAWNIND_CONTENT_FPATH, 'r'))
test_reserve = yaml.safe_load(open('config/test_reserve.yaml', 'r'))['test_reserve']
list_of_msssim_scores = {threshold: [] for threshold in ({0.55: 0.5386789441108704, 0.6: 0.5386789441108704, 0.65: 0.5752351880073547, 0.7: 0.6133408308029175, 0.75: 0.638195092861469, 0.8: 0.664829870685935, 0.85: 0.7104434280291848, 0.9: 0.7919600051262475, 0.95: 0.8307980092768931, 0.96: 0.8370669360160827, 0.97: 0.8493611401599237, 0.98: 0.8775720073935691, 0.99: 0.8977294883411591, 1.0: 0.9471623671631659}.55, .6, .65, .7, .75, .8, .85, .9, .95, .96, .97, .98, .99, 1.)}
for image_pair_descriptor in dataset_descriptor:
    if not image_pair_descriptor['is_bayer'] or 'rgb_msssim_score' not in image_pair_descriptor or image_pair_descriptor['image_set'] not in test_reserve:
        continue
    print(f"{image_pair_descriptor['image_set']}: {image_pair_descriptor['rgb_msssim_score']} * {len(image_pair_descriptor['crops'])}")
    for threshold in list_of_msssim_scores:
        if image_pair_descriptor['rgb_msssim_score'] <= threshold:
            list_of_msssim_scores[threshold] += len(image_pair_descriptor['crops']) * [image_pair_descriptor['rgb_msssim_score']]
for threshold in list_of_msssim_scores:
    try:
        print(f'# of crops meeting {threshold=}: {len(list_of_msssim_scores[threshold])}')
        list_of_msssim_scores[threshold] = statistics.mean(list_of_msssim_scores[threshold])
    except statistics.StatisticsError as e: 
        print(f'error {e}')
        breakpoint()
print(list_of_msssim_scores)
"""
0.5: 0.9471623671631659, 0.6: 0.9528887702900672, 0.7: 0.9632890114317769, 0.8: 0.9696365957384678, 0.85: 0.9752269836584317, 0.9: 0.9857954731090464, 0.95: 0.9908681560998485, 0.98: 0.9955494141904637, 0.99: 0.9972834067112332, 1.0: 1.0}

test reserve ge:
{0.0: 0.9471623671631659, 0.1: 0.9471623671631659, 0.2: 0.9471623671631659, 0.3: 0.9471623671631659, 0.4: 0.9471623671631659, 0.5: 0.9471623671631659, 0.55: 0.9528887702900672, 0.6: 0.9528887702900672, 0.65: 0.9577384954803928, 0.7: 0.9632890114317769, 0.75: 0.9668514581725878, 0.8: 0.9696365957384678, 0.85: 0.9752269836584317, 0.9: 0.9857954731090464, 0.95: 0.9908681560998485, 0.96: 0.991699353873151, 0.97: 0.9930015209362592, 0.98: 0.9955494141904637, 0.99: 0.9972834067112332, 1.0: 1.0}
test_reserve le:
{0.55: 0.5386789441108704, 0.6: 0.5386789441108704, 0.65: 0.5752351880073547, 0.7: 0.6133408308029175, 0.75: 0.638195092861469, 0.8: 0.664829870685935, 0.85: 0.7104434280291848, 0.9: 0.7919600051262475, 0.95: 0.8307980092768931, 0.96: 0.8370669360160827, 0.97: 0.8493611401599237, 0.98: 0.8775720073935691, 0.99: 0.8977294883411591, 1.0: 0.9471623671631659}


->
le:
0.85: 0.7104434280291848, 0.9: 0.7919600051262475, 0.97: 0.8493611401599237, 0.99: 0.8977294883411591
ge:
0.5: 0.9471623671631659, 0.6: 0.9528887702900672, 0.7: 0.9632890114317769, 0.8: 0.9696365957384678,  0.9: 0.9857954731090464, 0.95: 0.9908681560998485, 0.98: 0.9955494141904637, 0.99: 0.9972834067112332, 1.0: 1.0


train set ge:
{0.0: 0.9466947778591148, 0.1: 0.9466947778591148, 0.2: 0.9466947778591148, 0.3: 0.9466947778591148, 0.4: 0.9474856484190777, 0.5: 0.9501742967966526, 0.55: 0.953096047711445, 0.6: 0.9566126700179488, 0.65: 0.9617804117395173, 0.7: 0.9657521053556828, 0.75: 0.9718392755733448, 0.8: 0.9756409812725337, 0.85: 0.9806561555840562, 0.9: 0.986886925951975, 0.95: 0.9922552712003121, 0.96: 0.9932532458673509, 0.97: 0.9945093615667424, 0.98: 0.9959005615163854, 0.99: 0.9976020557626007, 1.0: 1.0}
"""