import numpy as np
import pytest
from rawnind.dependencies import raw_processing as raw

def test_color_transformer_initialization():
    """
    Test ColorTransformer initialization.

    Objective: Ensure ColorTransformer can be instantiated.
    Test criteria: Instance is created without errors.
    How testing fulfills purpose: Verifies basic setup of color transformation utilities.
    Components mocked: None - pure instantiation test.
    Reason for hermeticity: No external dependencies in initialization.
    """
    transformer = raw.ColorTransformer()
    assert transformer is not None

def test_color_transformer_matrix_methods():
    """
    Test ColorTransformer matrix generation methods.

    Objective: Verify color space transformation matrices are computed.
    Test criteria: Returns valid 3x3 matrices for different profiles.
    How testing fulfills purpose: Ensures color management utilities work.
    Components mocked: None - pure mathematical operations.
    Reason for hermeticity: Matrix computations are deterministic.
    """
    transformer = raw.ColorTransformer()

    # Test XYZ to RGB matrix
    matrix = transformer.get_xyz_to_rgb_matrix('sRGB')
    assert isinstance(matrix, np.ndarray)
    assert matrix.shape == (3, 3)

    # Test camRGB to profiledRGB
    metadata = raw.Metadata(
        fpath='dummy.cr2',
        bayer_pattern=raw.BayerPattern.RGGB,
        rgbg_pattern=np.array([[0, 1], [1, 2]]),
        sizes={'raw_width': 256, 'raw_height': 256},
        camera_whitebalance=np.array([1.0, 1.0, 1.0, 1.0]),
        black_level_per_channel=np.array([0, 0, 0, 0]),
        white_level=1,
        camera_white_level_per_channel=np.array([1.0, 1.0, 1.0, 1.0]),
        daylight_whitebalance=np.array([1.0, 1.0, 1.0, 1.0]),
        rgb_xyz_matrix=np.eye(3).astype(np.float32),
        overexposure_lb=1.0,
        camera_whitebalance_norm=np.array([1.0, 1.0, 1.0, 1.0]),
        daylight_whitebalance_norm=np.array([1.0, 1.0, 1.0, 1.0])
    )

    camrgb_matrix = transformer.get_camRGB_to_profiledRGB_img_matrix(metadata, 'sRGB')
    assert isinstance(camrgb_matrix, np.ndarray)
    assert camrgb_matrix.shape == (3, 3)

def test_color_transformer_camrgb_to_profiledrgb_img_numerical():
    """
    Test ColorTransformer.camRGB_to_profiledRGB_img for numerical accuracy with known inputs.

    Objective: Verify accurate numerical color transformation from camRGB to a profiled RGB.
    Test criteria: Specific pixel values match expected values after transformation.
    How testing fulfills purpose: Ensures color transformation logic is numerically correct.
    Components mocked: None - uses controlled numerical inputs for precise validation.
    Reason for hermeticity: Isolates numerical method for precise testing.
    """
    transformer = raw.ColorTransformer()

    # Create a simple 3-channel camRGB image
    camrgb_img = np.array([
        [[0.1, 0.2], [0.3, 0.4]],
        [[0.5, 0.6], [0.7, 0.8]],
        [[0.9, 0.0], [0.1, 0.2]]
    ], dtype=np.float32)

    # Simplified metadata with an identity rgb_xyz_matrix for easier calculation
    # and direct XYZ to lin_sRGB for validation
    metadata = raw.Metadata(
        fpath='dummy.cr2',
        bayer_pattern=raw.BayerPattern.RGGB, # Not directly used in this function, but required
        rgbg_pattern=np.array([[0, 1], [2, 3]]),
        sizes={'raw_width': 2, 'raw_height': 2},
        camera_whitebalance=np.array([1.0, 1.0, 1.0, 1.0]),
        black_level_per_channel=np.array([0, 0, 0, 0]),
        white_level=1,
        camera_white_level_per_channel=np.array([1.0, 1.0, 1.0, 1.0]),
        daylight_whitebalance=np.array([1.0, 1.0, 1.0, 1.0]),
        rgb_xyz_matrix=np.eye(3).astype(np.float32), # Identity for simplicity
        overexposure_lb=1.0,
        camera_whitebalance_norm=np.array([1.0, 1.0, 1.0, 1.0]),
        daylight_whitebalance_norm=np.array([1.0, 1.0, 1.0, 1.0])
    )

    # Manually compute expected output for 'lin_sRGB' with identity matrices
    xyz_to_srgb_matrix = np.array([
        [3.24100326, -1.53739899, -0.49861587],
        [-0.96922426, 1.87592999, 0.04155422],
        [0.05563942, -0.2040112, 1.05714897]
    ], dtype=np.float32)
    
    # Since rgb_xyz_matrix is identity, cam_to_xyzd65 will also be identity
    # So the full color_matrix will be xyz_to_srgb_matrix
    expected_profiled_img = (xyz_to_srgb_matrix @ camrgb_img.reshape(3, -1)).reshape(camrgb_img.shape)

    profiled_img = transformer.camRGB_to_profiledRGB_img(camrgb_img, metadata, 'lin_sRGB')

    assert np.allclose(profiled_img, expected_profiled_img, atol=1e-6)