<<<<<<< HEAD
"""
ICC color profile data for color space conversion.

This module provides binary ICC (International Color Consortium) profile data for the 
Rec.2020 color space, stored as NumPy arrays. ICC profiles are standardized data structures
that define the color characteristics of input and output devices, ensuring consistent
color representation across different systems and applications.

The Rec.2020 color space (also known as BT.2020) is a wide color gamut standard
developed for ultra-high-definition television (UHDTV) and digital cinema. It offers
a significantly larger color gamut than the commonly used sRGB or Rec.709 spaces,
enabling more vivid and accurate color reproduction.

This profile data is used throughout the project for:
- Converting camera RGB data to linear Rec.2020 color space
- Ensuring color accuracy in image processing pipelines
- Facilitating consistent color transformations between different color spaces
- Embedding proper color profile information in output image files

The binary data is stored in a structured format defined by the ICC specification,
which includes header information, tag data, and color transformation tables.

References:
    - International Color Consortium: https://www.color.org/
    - Rec.2020 standard: https://www.itu.int/rec/R-REC-BT.2020
"""

import numpy as np

# ICC profile data for linear Rec.2020 RGB color space
rec2020 = np.array(
    [
        0,
        0,
        3,
        136,
        108,
        99,
        109,
        115,
        2,
        64,
        0,
        0,
        109,
        110,
        116,
        114,
        82,
        71,
        66,
        32,
        88,
        89,
        90,
        32,
        7,
        231,
        0,
        9,
        0,
        5,
        0,
        14,
        0,
        56,
        0,
        37,
        97,
        99,
        115,
        112,
        65,
        80,
        80,
        76,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        246,
        214,
        0,
        1,
        0,
        0,
        0,
        0,
        211,
        45,
        108,
        99,
        109,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        13,
        100,
        101,
        115,
        99,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        148,
        99,
        112,
        114,
        116,
        0,
        0,
        1,
        180,
        0,
        0,
        0,
        22,
        119,
        116,
        112,
        116,
        0,
        0,
        1,
        204,
        0,
        0,
        0,
        20,
        99,
        104,
        97,
        100,
        0,
        0,
        1,
        224,
        0,
        0,
        0,
        44,
        114,
        88,
        89,
        90,
        0,
        0,
        2,
        12,
        0,
        0,
        0,
        20,
        98,
        88,
        89,
        90,
        0,
        0,
        2,
        32,
        0,
        0,
        0,
        20,
        103,
        88,
        89,
        90,
        0,
        0,
        2,
        52,
        0,
        0,
        0,
        20,
        114,
        84,
        82,
        67,
        0,
        0,
        2,
        72,
        0,
        0,
        0,
        14,
        103,
        84,
        82,
        67,
        0,
        0,
        2,
        72,
        0,
        0,
        0,
        14,
        98,
        84,
        82,
        67,
        0,
        0,
        2,
        72,
        0,
        0,
        0,
        14,
        99,
        104,
        114,
        109,
        0,
        0,
        2,
        88,
        0,
        0,
        0,
        36,
        100,
        109,
        100,
        100,
        0,
        0,
        2,
        124,
        0,
        0,
        0,
        148,
        100,
        109,
        110,
        100,
        0,
        0,
        3,
        16,
        0,
        0,
        0,
        120,
        100,
        101,
        115,
        99,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        19,
        76,
        105,
        110,
        101,
        97,
        114,
        32,
        82,
        101,
        99,
        50,
        48,
        50,
        48,
        32,
        82,
        71,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        19,
        0,
        76,
        0,
        105,
        0,
        110,
        0,
        101,
        0,
        97,
        0,
        114,
        0,
        32,
        0,
        82,
        0,
        101,
        0,
        99,
        0,
        50,
        0,
        48,
        0,
        50,
        0,
        48,
        0,
        32,
        0,
        82,
        0,
        71,
        0,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        116,
        101,
        120,
        116,
        0,
        0,
        0,
        0,
        80,
        117,
        98,
        108,
        105,
        99,
        32,
        68,
        111,
        109,
        97,
        105,
        110,
        0,
        0,
        0,
        88,
        89,
        90,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        246,
        214,
        0,
        1,
        0,
        0,
        0,
        0,
        211,
        45,
        115,
        102,
        51,
        50,
        0,
        0,
        0,
        0,
        0,
        1,
        12,
        66,
        0,
        0,
        5,
        222,
        255,
        255,
        243,
        37,
        0,
        0,
        7,
        147,
        0,
        0,
        253,
        144,
        255,
        255,
        251,
        161,
        255,
        255,
        253,
        162,
        0,
        0,
        3,
        220,
        0,
        0,
        192,
        110,
        88,
        89,
        90,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        172,
        105,
        0,
        0,
        71,
        111,
        255,
        255,
        255,
        129,
        88,
        89,
        90,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        3,
        0,
        0,
        11,
        173,
        0,
        0,
        203,
        254,
        88,
        89,
        90,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        42,
        105,
        0,
        0,
        172,
        227,
        0,
        0,
        7,
        173,
        99,
        117,
        114,
        118,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        0,
        0,
        0,
        99,
        104,
        114,
        109,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        181,
        63,
        0,
        0,
        74,
        193,
        0,
        0,
        43,
        133,
        0,
        0,
        204,
        8,
        0,
        0,
        33,
        137,
        0,
        0,
        11,
        199,
        100,
        101,
        115,
        99,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        19,
        76,
        105,
        110,
        101,
        97,
        114,
        32,
        82,
        101,
        99,
        50,
        48,
        50,
        48,
        32,
        82,
        71,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        19,
        0,
        76,
        0,
        105,
        0,
        110,
        0,
        101,
        0,
        97,
        0,
        114,
        0,
        32,
        0,
        82,
        0,
        101,
        0,
        99,
        0,
        50,
        0,
        48,
        0,
        50,
        0,
        48,
        0,
        32,
        0,
        82,
        0,
        71,
        0,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        100,
        101,
        115,
        99,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        10,
        100,
        97,
        114,
        107,
        116,
        97,
        98,
        108,
        101,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        10,
        0,
        100,
        0,
        97,
        0,
        114,
        0,
        107,
        0,
        116,
        0,
        97,
        0,
        98,
        0,
        108,
        0,
        101,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
    ],
    dtype="uint8",
)
=======
import numpy as np
import torch


def get_XYZ_to_profiledRGB_matrix(profile: str) -> np.ndarray:
    """Returns a static XYZ->profile matrix."""
    if profile == "lin_rec2020":
        return np.array(
            [
                [1.71666343, -0.35567332, -0.25336809],
                [-0.66667384, 1.61645574, 0.0157683],
                [0.01764248, -0.04277698, 0.94224328],
            ],
            dtype=np.float32,
        )
    elif "sRGB" in profile:
        return np.array(
            [
                [3.24100326, -1.53739899, -0.49861587],
                [-0.96922426, 1.87592999, 0.04155422],
                [0.05563942, -0.2040112, 1.05714897],
            ],
            dtype=np.float32,
        )
    else:
        raise NotImplementedError(f"get_XYZ_to_profiledRGB_matrix: {profile} not *_sRGB or lin_rec2020.")


def get_camRGB_to_profiledRGB_img_matrix(
    metadata: dict, output_color_profile: str
) -> np.ndarray:
    """Get conversion matrix from camRGB to a given color profile."""
    cam_to_xyzd65 = np.linalg.inv(metadata["rgb_xyz_matrix"][:3])
    if output_color_profile.lower() == "xyz":
        return cam_to_xyzd65
    xyz_to_profiledRGB = get_XYZ_to_profiledRGB_matrix(output_color_profile)
    color_matrix = xyz_to_profiledRGB @ cam_to_xyzd65
    return color_matrix


def camRGB_to_profiledRGB_img(
    camRGB_img: np.ndarray, metadata: dict, output_color_profile: str
) -> np.ndarray:
    """Convert camRGB debayered image to a given RGB color profile (in-place)."""
    color_matrix = get_camRGB_to_profiledRGB_img_matrix(metadata, output_color_profile)
    orig_dims = camRGB_img.shape
    profiledRGB_img = (color_matrix @ camRGB_img.reshape(3, -1)).reshape(orig_dims)
    if output_color_profile.startswith("gamma"):
        apply_gamma(profiledRGB_img, output_color_profile)
    return profiledRGB_img


def apply_gamma(profiledRGB_img: np.ndarray, color_profile: str) -> None:
    """Apply gamma correction (in-place)."""
    if color_profile == "gamma_sRGB":
        # See https://en.wikipedia.org/wiki/SRGB
        img_mask = profiledRGB_img > 0.0031308
        profiledRGB_img[img_mask] = (
            1.055 * np.power(profiledRGB_img[img_mask], 1.0 / 2.4) - 0.055
        )
        profiledRGB_img[~img_mask] *= 12.92
    else:
        raise NotImplementedError(f"apply_gamma with {color_profile=}")


def get_XYZ_to_profiledRGB_matrix_torch(profile: str) -> torch.Tensor:
    """Returns a static XYZ->profile matrix as torch tensor."""
    matrix_np = get_XYZ_to_profiledRGB_matrix(profile)
    return torch.tensor(matrix_np, dtype=torch.float32)


def get_camRGB_to_profiledRGB_img_matrix_torch(
    metadata: dict, output_color_profile: str
) -> torch.Tensor:
    """Get conversion matrix from camRGB to a given color profile as torch tensor."""
    matrix_np = get_camRGB_to_profiledRGB_img_matrix(metadata, output_color_profile)
    return torch.tensor(matrix_np, dtype=torch.float32)


def camRGB_to_profiledRGB_img_torch(
    camRGB_img: torch.Tensor,
    metadata: dict,
    output_color_profile="lin_rec2020",
) -> torch.Tensor:
    """Convert camRGB debayered image to a given RGB color profile (torch version)."""
    color_matrix = get_camRGB_to_profiledRGB_img_matrix_torch(metadata, output_color_profile)
    profiledRGB_img = torch.mm(color_matrix, camRGB_img.view(3, -1)).view(camRGB_img.shape)
    if output_color_profile.startswith("gamma"):
        profiledRGB_img = apply_gamma_torch(profiledRGB_img, output_color_profile)
    return profiledRGB_img


def apply_gamma_torch(profiledRGB_img: torch.Tensor, color_profile: str) -> torch.Tensor:
    """Apply gamma correction (in-place, torch version)."""
    profiledRGB_img = profiledRGB_img.clone()
    if color_profile == "gamma_sRGB":
        img_mask = profiledRGB_img > 0.0031308
        profiledRGB_img[img_mask] = 1.055 * torch.pow(profiledRGB_img[img_mask], 1.0 / 2.4) - 0.055
        profiledRGB_img[~img_mask] *= 12.92
    else:
        raise NotImplementedError(f"apply_gamma_torch with {color_profile=}")
    return profiledRGB_img
>>>>>>> 9d829208844a9450effb8f515b5521749b6aed0c
